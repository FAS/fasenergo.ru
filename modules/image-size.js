const { join, normalize, extname } = require('path')

const DELIMETER = '@'

/**
 * Get image size variations
 * @param {string}   src                    Path to image with filename
 * @param {object[]} imagesData             Specific object with information about each image.
 *                                          Generated by `grunt-image-size` task
 * @param {string}   [delimeter=DELIMETER]  Delimeters, which marks filename suffix. For instance,
 *                                          `@` for `image@200.jpg`, which is 200px variant
 * @return {object[]} Set of images size variations
 */
const getImageSet = (src, imagesData, delimeter = DELIMETER) => {
  const filepath = src.replace(new RegExp(`${extname(src)}$`), '')

  return imagesData.filter((e) => {
    const name = normalize(e.name)

    return name.startsWith(`${filepath}${DELIMETER}`) || name === src
  })
}

/**
 * Make `srcset` content for `<img>` tag
 * @param {object[]} set Specific object with set of images, which represetns same image
 *                       in varius sizes
 * @return {string} Formed `srcset` attribute
 */
const printImageSet = (set) => {
  if (set.length <= 1) return

  let srcset = ''

  set.forEach((s, i) => {
    const isLast = i + 1 === set.length
    srcset += `${s.name} ${s.width}w${isLast ? '' : ', '}`
  })

  return srcset
}

/**
 * Strip `baseDir` from each image entry
 * @param {object[]} entries    Specific object with information about each image
 * @param {string}   baseDir    Root dir, where build files stored. Used for paths resolving
 * @return {object[]} Same entries, but with removed `baseDir` from filepath
 */
const stripBaseDir = (entries, baseDir) =>
  entries.map((e) => Object.assign({}, e, { name: e.name.replace(baseDir, '') })
)

/**
 * Get image size and its srcset
 * @param {string}   src        Path to image with filename
 * @param {object[]} imagesData Specific object with information about each image.
 *                              Generated by `grunt-image-size` task
 * @param {string}   baseDir    Root dir, where build files stored. Used for paths resolving
 * @return {object} Image dimensions info
 */
const imageSize = (src, imagesData, baseDir) => {
  if (typeof src !== 'string') throw new Error(`[imageSize] \`src\` must be a string, \`${typeof src}\` provided`)

  if (src.startsWith('http') || src.startsWith('ftp')) return { src, srcset: () => null }

  // @todo We have to exit in case of some formats, because of hardcoded extensions
  //      in https://github.com/saperio/grunt-image-size/blob/master/tasks/image_size.js#L14
  if (src.endsWith('.svg')) return { src, srcset: () => null }

  if (!src.startsWith('/')) throw new Error(`[imageSize] document-relative urls not supported yet, \`${src}\` provided`)
  if (typeof baseDir !== 'string') throw new Error(`[imageSize] \`baseDir\` must be a string, \`${typeof baseDir}\` provided`)
  if (!Array.isArray(imagesData)) throw new Error(`[imageSize] \`imagesData\` must be an array, \`${typeof imagesData}\` provided`)

  const fullSrc = join(baseDir, src)
  const image = imagesData.find((e) => fullSrc === normalize(e.name))

  if (!image) throw new Error(`[imageSize] image \`${fullSrc}\` did not match any image data`)

  const makeSet = () => stripBaseDir(getImageSet(fullSrc, imagesData), baseDir)

  return {
    src,
    width: image.width,
    height: image.height,
    set: makeSet,
    srcset: () => printImageSet(makeSet())
  }
}

module.exports = imageSize
