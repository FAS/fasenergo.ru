{##
 # Display nav item. Should be used in context of Nav component
 #
 # @param {string} to                                    Absolute or relative path passed to Link
 # @param {string} [label]                               Label of the anchor
 # @param {number} [depth]                 = 1           Depth of current nav item
 # @param {string} [itemsClass]            = ''          Class of list item
 # @param {string} [anchorsClass]          = ''          Class of anchor inside list itme
 # @param {string} [activeClass]           = 'is-active' Class of active list item
 # @param {number} [startDepth]            = 1           From which depth nav should start to print
 # @param {number} [maxDepth]              = 999999      Max amount of subnavs to print
 # @param {bool}   [showInnerOnlyOnActive] = false       Print subnavs only when parent is active
 # @param {bool}   [enableDrawer]          = false       Enable if nav item has Sidebar drawer
 #
 # @return {string} Generated nav
 #
 # @example See Nav component for usage example
 #}
{% macro NavItem(
  to,
  label,
  depth                 = 1,
  class                 = '',
  anchorClass           = '',
  activeClass           = 'is-active',
  startDepth            = 1,
  maxDepth              = 999999,
  showInnerOnlyOnActive = false,
  enableDrawer          = false
) %}

  {% set itemIsActive = isActive(to) %}
  {% set itemProps    = getPage(crumble(to)).props|template(site.placeholders) %}

  {# For cases when you need to have sub navs #}
  {% set callerDepth = depth + 1 %}
  {% if (callerDepth <= maxDepth) and (itemIsActive if showInnerOnlyOnActive else true) %}
    {% set subnav = caller(callerDepth) if caller %}
    {% set subnavNotEmpty = true if subnav.val %}
  {% endif %}

  {% if depth >= startDepth and itemProps.display != false %}

    <li class='{{ class }} {{ activeClass if itemIsActive }}'>

      {% call components.Link(
        to = to,
        class = anchorClass + (' has-subnav' if subnavNotEmpty) + (' js-drawer' if enableDrawer and subnavNotEmpty),
        activeClass = activeClass
      ) %}
        {{ label if label else itemProps.navTitle }}
        {{ components.Icon('dir-right', class = 'Nav__subnav-icon Icon--right h-text--em-- h-top') if subnavNotEmpty }}
      {% endcall %}

      {% if subnavNotEmpty %}
      {% if enableDrawer %}<div class='Drawer js-drawer__nav h-text-'>{% endif %}
        <ul class='o-nav o-nav--stacked'>
          {{ subnav }}
        </ul>
      {% if enableDrawer %}
        <button class='Drawer__close js-drawer__close'>{{ components.Icon('x') }}</button>
      </div>
      {% endif %}
      {% endif %}

    </li>

  {# Go on to loop over subnavs, untill we reach needed depth #}
  {% else %}

    {{ subnav }}

  {% endif %}

{% endmacro %}