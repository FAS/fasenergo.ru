{##
 # Output amount phases as a word
 # @param {number} phases Amount of phases
 # @return {string} Phases in a word
 # @example {{ components.PhasesToWord(1) }} -> 'однофазовый'
 #}
{%- macro PhasesToWord(phases) -%}
  {%- if phases == 1 -%}
    {{ 'однофазовый' }}
  {%- elseif phases == 3 -%}
    {{ 'трехфазный' }}
  {% else %}
    {{ warn('[PhasesToWord] unknown number of phases: `' + phases + '`') }}
  {% endif %}
{%- endmacro -%}

{##
 # Output fuel type as a word
 # @param {string} phases Fuel type id
 # @return {string} Fuel type in a word
 # @example {{ components.FuelTypeToWord('ng') }} -> 'метан'
 #}
{%- macro FuelTypeToWord(fuel) -%}
  {%- if fuel == 'ng' -%}
    {{ 'метан' }}
  {%- elseif fuel == 'lpg' -%}
    {{ 'СУГ' }}
  {% else %}
    {{ warn('[FuelTypeToWord] unknown fuel type: `' + fuel + '`') }}
  {% endif %}
{%- endmacro -%}

{##
 # Output enclosure type as a word
 # @param {string} enclosure Enclosure type id
 # @return {string} Enclosure type in a word
 # @example {{ components.EnclosureTypeToWord('open') }} -> 'открытое'
 #}
{%- macro EnclosureTypeToWord(enclosure) -%}
  {%- if enclosure == 'open' -%}
    {{ 'открытое' }}
  {%- elseif enclosure == 'soundproof' -%}
    {{ 'закрытое с шумопоглощением' }}
  {% else %}
    {{ warn('[EnclosureTypeToWord] unknown enclosure type: `' + enclosure + '`') }}
  {% endif %}
{%- endmacro -%}

{##
 # Output engine cooling type as a word
 # @param {string} coolingType Engine cooling type id
 # @return {string} Enclosure type in a word
 # @example {{ components.CoolingToWord('air') }} -> 'воздушное'
 #}
{%- macro CoolingToWord(coolingType) -%}
  {%- if coolingType == 'air' -%}
    {{ 'воздушное' }}
  {%- elseif coolingType == 'liquid' -%}
    {{ 'жидкостное' }}
  {% else %}
    {{ warn('[CoolingToWord] unknown cooling type: `' + phases + '`') }}
  {% endif %}
{%- endmacro -%}

{##
 # Output powers of product as inline list
 # @param {number[]} powers Array of product powers (ng, lpg)
 # @return {string} Powers as a list
 # @example {{ components.PowersList([12, 15]) }} -> '12/15'
 #}
{%- macro PowersList(powers) -%}
  {%- for p in powers -%}
    {{ numbro(p).format() }}{{ '/' if not loop.last }}
  {%- endfor -%}
{%- endmacro -%}