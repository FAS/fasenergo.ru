{##
 # Display email number from contacts data
 #
 # @param {pbject} data Complex object with email data. See source/data/contacts.coffee
 # @param {string} [class] CSS class for anchor
 #
 # @return {string} Email inside anchor
 #
 # @example {{ components.Email(data.contacts.departments.sales.emails[0]) }}
 #}
{%- macro Email(data) -%}
  {% set macroEmail = data.value[0] + '@' + data.value[1] %}

  <a class='{{ class }}' href='mailto:{{ macroEmail }}'>{{ macroEmail }}</a>
{%- endmacro -%}

{##
 # Display skype from contacts data
 #
 # @param {pbject} data       Complex object with email data. See source/data/contacts.coffee
 # @param {string} [class]    CSS classes of anchor
 # @param {bool}   [showIcon] Should skype icon be shown in front
 #
 # @return {string} Skype inside anchor
 #
 # @example {{ components.Skype(data.contacts.departments.sales.skypes[0]) }}
 #}
{%- macro Skype(data, class, showIcon) -%}
  {% set macroSkype = data.value %}

  <a class='{{ class }} g-link--inherit' href='skype:{{ macroSkype }}?call'>{{ components.Icon('skype', class = 'Icon--left') if showIcon }} <span>{{ macroSkype }}</span></a>
{%- endmacro -%}

{##
 # Display phone number from contacts data
 #
 # @param {pbject} data                 Complex object with phone data. See source/data/contacts.coffee
 # @param {string} [class]              CSS class for anchor
 # @param {string} [addClass]           CSS class for span with 'доб. ' part
 # @param {bool}   [showCountry = true] Should + with country code be shown
 # @param {bool}   [showAdd = true]     Should 'доб. ' part be shown (if add info exists)
 # @param {bool}   [plain]              Should number be displayed in plain format
 #
 # @return {string} Phone number inside anchor
 #
 # @example {{ components.Phone(data.contacts.departments.sales.phones[0]) }}
 #}
{%- macro Phone(data, class, addClass, showCountry = true, showAdd = true, plain) -%}
  {% set plainPhone = '+' + data.country + data.city + data.tel[0] + data.tel[1] + data.tel[2] %}
  {% set macroCityCode = ('(' if not data.noParentheses) + data.city + (')' if not data.noParentheses) %}

  <a href='tel:{{ plainPhone }}' class='{{ class }} g-link--inherit h-text--nowrap'>{{ '+' + data.country + '&nbsp;' if showCountry }}{{ macroCityCode }}&nbsp;{{ data.tel[0] }}-{{ data.tel[1] }}-{{ data.tel[2] }}<span class='{{ addClass }}'>{{ '&nbsp;доб.&nbsp;' + data.add if data.add and showAdd }}</span></a>
{%- endmacro -%}

{##
 # Output amount phases as a word
 # @param {number} phases Amount of phases
 # @return {string} Phases in a word
 # @example {{ components.PhasesToWord(1) }} -> 'однофазный'
 #}
{%- macro PhasesToWord(phases) -%}
  {%- if phases == 1 -%}
    {{ 'однофазный' }}
  {%- elseif phases == 3 -%}
    {{ 'трехфазный' }}
  {% else %}
    {{ warn('[PhasesToWord] unknown number of phases: `' + phases + '`') }}
  {% endif %}
{%- endmacro -%}

{##
 # Output fuel type as a word
 # @param {string} phases Fuel type id
 # @return {string} Fuel type in a word
 # @example {{ components.FuelTypeToWord('ng') }} -> 'метан'
 #}
{%- macro FuelTypeToWord(fuel) -%}
  {%- if fuel == 'ng' -%}
    {{ 'метан' }}
  {%- elseif fuel == 'lpg' -%}
    {{ 'СУГ' }}
  {% else %}
    {{ warn('[FuelTypeToWord] unknown fuel type: `' + fuel + '`') }}
  {% endif %}
{%- endmacro -%}

{##
 # Output engine cooling type as a word
 # @param {string} coolingType Engine cooling type id
 # @return {string} Enclosure type in a word
 # @example {{ components.CoolingToWord('air') }} -> 'воздушное'
 #}
{%- macro CoolingToWord(coolingType) -%}
  {%- if coolingType == 'air' -%}
    {{ 'воздушное' }}
  {%- elseif coolingType == 'liquid' -%}
    {{ 'жидкостное' }}
  {% else %}
    {{ warn('[CoolingToWord] unknown cooling type: `' + phases + '`') }}
  {% endif %}
{%- endmacro -%}

{##
 # Output powers of product as inline list
 # @param {number[]} powers Array of product powers (ng, lpg)
 # @return {string} Powers as a list
 # @example {{ components.PowersList([12, 15]) }} -> '12/15'
 #}
{%- macro PowersList(powers) -%}
  {%- for p in powers -%}
    {{ numbro(p).format() }}{{ '/' if not loop.last }}
  {%- endfor -%}
{%- endmacro -%}