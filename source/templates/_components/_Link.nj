{##
 # Display anchor based on provided data. Based on React-router `Link` component idea
 # Use `call` if you need label to be something more complex, than just a string
 #
 # @param {string} to                                    Root-relative path to page.
 #                                                       Document-relative paths not supported
 # @param {string} [label]                               Anchor label
 # @param {string} [class]             = ''              Anchor class
 # @param {object} [attrs]             = {}              Any HTML5 attributes, except `class`
 # @param {bool}   [exact]             = false           Set item to be active only if item
 #                                                       path completely matches current breadcrumb
 # @param {string} [activeClass]       = 'is-active'     Class for active anchor
 # @param {string} [localeDir]         = localeDir()     L10n leading part of path, like `/de/`
 # @param {array}  [pageBreadcrumb]    = PAGE.breadcrumb Breadcrumb of current page for comparison
 #
 # @return {string} Generated `<a>` with properly set active state
 #
 # @example
 #  {{ Link(
 #    to = '/examples/',
 #    label = 'Examples',
 #    class = 'your-class'
 #  )}}
 #
 #  {% call Link(to = '/example/', class = 'your-class') %}
 #    <i>icon</i> Label
 #  {% endcall %}
 #}
{%- macro Link(
  to,
  label,
  class = '',
  attrs = {},
  exact = false,
  activeClass = 'is-active',
  localeDir = localeDir(),
  pageBreadcrumb = PAGE.breadcrumb
) -%}
{% set isActive = isActive(to, exact, pageBreadcrumb) %}
{% set url = getPage(to).props.url %}
{% set label = caller() if caller else label %}

<a href='{{ localeDir if url == '/' else urljoin(localeDir, url) }}' class='{{ class }} {{ activeClass if isActive }}' {{ attrs|spread }}>{{ label }}</a>
{%- endmacro -%}