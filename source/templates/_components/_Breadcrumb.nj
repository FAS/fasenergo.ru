{##
 # Display breadcrumb block based on provided data
 #
 # @param {string} [class]           = 'o-breadcrumb o-breadcrumb--rev'
 #                                          Class of list
 # @param {string} [itemsClass]      = 'o-breadcrumb__item'
 #                                          Class of list items
 # @param {string} [anchorsClass]    = ''   Class of anchors inside list itmes
 # @param {string} [rootItemClass]   = 'o-breadcrumb__item--root'
 #                                          Class of root (first) list item
 # @param {string} [rootAnchorClass] = ''   Class of anchor inside of root list item
 # @param {bool}   [displayLast]     = true Display last crumb or not
 # @param {array}  [breadcrumb]      = page.breadcrumb
 #                                          Breadcrumb in form of array to iterate upon
 # @param {string} [rootTitle]       = getPage(['index']).props.breadcrumbTitle
 #                                          Title for root element
 # @param {object} [placeholders]    = site.placeholders
 #                                          Object with values for occuring in titles sprintf placeholders
 #
 # @return {string} Generated `ul` with breadcrumb
 #
 # @example {{ components.Breadcrumb() }}
 #}
{% macro Breadcrumb(
  class           = 'o-breadcrumb',
  itemsClass      = 'o-breadcrumb__item',
  anchorsClass    = '',
  rootItemClass   = 'o-breadcrumb__item--root',
  rootAnchorClass = '',
  displayLast     = true,
  breadcrumb      = page.breadcrumb,
  rootTitle       = getPage(['index']).props.breadcrumbTitle|template(site.placeholders),
  placeholders    = site.placeholders
) %}
  <ul class='{{ class }}'>

    <li class='{{ itemsClass }} {{ rootItemClass }}'>
      <a class='{{ anchorsClass }} {{ rootAnchorClass }}' href='{{ localeDir() }}/'>{{ rootTitle|template(placeholders) }}</a>
    </li>

    {% for crumb in breadcrumb %}

      {% set currentCrumb = [crumb] if loop.index0 == 0 else currentCrumb|pushIn(crumb)  %}
      {% set crumbPages   = getPage(currentCrumb) %}
      {% set crumbProps   = crumbPages.props|template(placeholders) %}
      {% set title        = crumbProps.breadcrumbTitle %}
      {% set url          = crumbProps.url %}

      {% set hasSubpages = false %}
      {% for slug, item in crumbPages %}
        {% set hasSubpages = true if item else false %}
      {% endfor %}

      {% if not loop.last %}

        <li class='{{ itemsClass }} h-relative js-expand__scope'>

          <a class='{{ anchorsClass }} {{ 'Expand-link-alt has-subnav js-expand' if hasSubpages }}' data-expand-scope='.js-expand__scope' data-expand-close-on-outside-click='true' href='{{ localeDir() }}{{ url }}'>
            {{ title }}
            {{ components.Icon('dir-right', class = 'Expand-link-alt__icon') if hasSubpages }}
          </a>

          {% if hasSubpages %}
          {#
           # @note Items will end up sorted differently from Nav components, since they
           #       pulled directly from page matter, not Nav component. We can't
           #       rely on Nav as source of this information, since it might not always
           #       have internal items listed, while they might actually exist in site
           #       structure. Also, Nav component can't provide information about whether
           #       certain breadcrumb page actually have any pages, since it isn't an object,
           #       but a generated HTML, and you can't check anything on it
           #}
          <div class='Dropdown js-expand__target' style='display: none'>
            <ul class='o-nav o-nav--stacked h-childs-space-top---'>
              {% for slug, item in crumbPages %}
              <li class='Nav__item {{ 'is-active' if isActive(item.props.url) }}'>
                <a class='Nav__link h-inline' href='{{ item.props.url }}'>{{ item.props.navTitle }}</a>
              </li>
              {% endfor %}
            </ul>
            {# {{ components.Nav(
              class        = 'o-nav o-nav--stacked h-childs-space-top---',
              itemsClass   = 'Nav__item',
              anchorsClass = 'Nav__link',
              activeClass  = 'is-active',
              startDepth   = loop.index + 1,
              maxDepth     = loop.index + 1,
              showInnerOnlyOnActive = true
            ) }} #}
          </div>
          {% endif %}

        </li>

      {% elif displayLast %}

        <li class='{{ itemsClass }}'>{{ title }}</li>

      {% endif %}

    {% endfor %}

  </ul>
{% endmacro %}